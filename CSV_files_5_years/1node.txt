#TIMEHORIZON
T = 8760*5;

#GLOBAL
demand_el = import "demand_el.csv"; // GWh/h - tertiary, industry, residential and railway electricity demand
demand_el_ht = import "demand_el_ht.csv"; // GWh/h - electricity heating demand
daily_demand_for_electric_vehicle = import "demand_el_tr.csv"; // GWh - electricity demand for EV charging
demand_ng_heat = import "demand_ng_ht.csv"; // GWh/h
demand_ng_industry = import "demand_ng_id.csv"; // GWh/h
demand_ng_to_h2 = import "demand_ngth2.csv"; // GWh/h 
demand_ng_transport = import "demand_ng_tr.csv"; // GWh/h
ng_import_capacity = 90; // GWh
demand_h2_industry = import "demand_h2_id.csv"; // GWh/h
demand_h2_transport = import "demand_h2_tr.csv"; // GWh/h
spec_CO2_emission = 0.202;
max_co2_captured_rate = 0.9;

#NODE SOLAR_PV_PLANTS
#PARAMETERS
production_profile = import "load_factor_PV.csv"; // normalized
pre_installed_capacity = 4.0; // GW(h)
max_capacity = 40.0; // GW(h)
capex = 510.0; // k€/MW(h)
fom = 8.8; // M€/GW(h)
vom = 0.0; // k€/MWh
lifetime = 30;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h - electricity produced
#CONSTRAINTS
capacity >= 0;
e_produced[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
e_produced[t] <= production_profile[t] * (capacity + pre_installed_capacity);
#OBJECTIVES
min: (capex_year + fom * year) * capacity ; // M€
min: vom * e_produced[t]; // M€

#NODE WIND_ONSHORE
#PARAMETERS
production_profile = import "load_factor_won.csv"; // normalized
pre_installed_capacity = 2.8; // GW(h)
max_capacity = 8.4; // GW(h)
capex = 910.0; // k€/MW(h)
fom = 22.3; // M€/GW(h)
vom = 2.3 * 1/(10**3); // k€/MWh
lifetime = 30;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h
#CONSTRAINTS
capacity >= 0;
e_produced[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
e_produced[t] <= production_profile[t] * (capacity + pre_installed_capacity);
#OBJECTIVES
min: (capex_year + fom * year) * capacity ; // M€
min: vom * e_produced[t]; // M€

#NODE WIND_OFFSHORE
#PARAMETERS
production_profile = import "load_factor_woff.csv"; // normalized
pre_installed_capacity = 2.3; // GW(h)
max_capacity = 8.0; // GW(h)
capex = 2000.0; // k€/MW(h)
fom = 37.8; // M€/GW(h)
vom = 2.7 * 1/(10**3); // k€/MWh
lifetime = 30;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h
#CONSTRAINTS
capacity >= 0;
e_produced[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
e_produced[t] <= production_profile[t] * (capacity + pre_installed_capacity);
#OBJECTIVES
min: (capex_year + fom * year) * capacity ; // M€
min: vom * e_produced[t]; // M€

#NODE WASTE_POWER_PLANT
#PARAMETERS
pre_installed_capacity = 0.3; // GW(h)
max_capacity = 0.3; // GW(h)
ramp_rate_up = 0.25; // 
ramp_rate_down = 0.3; // 
min_external_power = 0.2; // 
spec_CO2_emission = 0.33; // kt/GWh or t/MWh
conversion_efficiency = 0.227; // 
fuel_cost = 10.0 * 1/(10**3); // k€/MWh
fom = 175.6; // M€/GW(h)
vom = 2.48 * 1/(10**3); // k€/MWh
year = T/8760;
#VARIABLES
//internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h
external: co2_produced[T]; // kt/h
#CONSTRAINTS
//capacity[t] >= 0;
e_produced[t] >= 0;
co2_produced[t] >= 0;
//capacity == capacity[t];
//capacity[t] <= max_capacity - pre_installed_capacity;
min_external_power * (pre_installed_capacity) <= e_produced[t];
e_produced[t] <= pre_installed_capacity;
e_produced[t] - e_produced[t-1] <= ramp_rate_up * (pre_installed_capacity);
e_produced[t] - e_produced[t-1] >= - ramp_rate_down * (pre_installed_capacity);
co2_produced[t] == spec_CO2_emission * e_produced[t]/conversion_efficiency;
#OBJECTIVES
min: fuel_cost * e_produced[t]/conversion_efficiency; // M€
min: vom * e_produced[t]; // M€

#NODE BIOMASS_POWER_PLANT
#PARAMETERS
pre_installed_capacity = 0.9; // GW(h)
max_capacity = 0.9; // GW(h)
ramp_rate_up = 0.25; // 
ramp_rate_down = 0.3; // 
min_external_power = 0.0; // 
spec_CO2_emission = 0.4; // kt/GWh or t/MWh
conversion_efficiency = 0.281; // 
fuel_cost = 35.0 * 1/(10**3); // k€/MWh
//capex = ; // k€/MW(h)
fom = 102.951; // M€/GW(h)
vom = 5.13 * 1/(10**3); // k€/MWh
year = T/8760;
#VARIABLES
//internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h
external: co2_produced[T]; // kt/h
#CONSTRAINTS
//capacity[t] >= 0;
e_produced[t] >= 0;
co2_produced[t] >= 0;
//capacity == capacity[t];
//capacity[t] <= max_capacity - pre_installed_capacity;
min_external_power * (pre_installed_capacity) <= e_produced[t];
e_produced[t] <= pre_installed_capacity;
e_produced[t] - e_produced[t-1] <= ramp_rate_up * (pre_installed_capacity);
e_produced[t] - e_produced[t-1] >= - ramp_rate_down * (pre_installed_capacity);
co2_produced[t] == spec_CO2_emission * e_produced[t]/conversion_efficiency;
#OBJECTIVES
min: fuel_cost * e_produced[t]/conversion_efficiency; // M€
min: vom * e_produced[t]; // M€

#NODE NUCLEAR_POWER_PLANT
#PARAMETERS
pre_installed_capacity = 0.0; // GW(h)
max_capacity = pre_installed_capacity; // GW(h)
ramp_rate_up = 0.01; // 
ramp_rate_down = 0.01; // 
min_external_power = 0.0; // 
conversion_efficiency = 0.4; // 
fuel_cost = 0.0; // k€/MWh 
//capex = ; // k€/MW(h)
fom = 92.979; // M€/GW(h)
vom = 2.133 * 1/(10**3); // k€/MWh
year = 5;
#VARIABLES
//internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h
#CONSTRAINTS
//capacity[t] >= 0;
e_produced[t] >= 0;
//capacity == capacity[t];
//capacity[t] <= max_capacity - pre_installed_capacity;
min_external_power * (pre_installed_capacity) <= e_produced[t];
e_produced[t] <= pre_installed_capacity;
e_produced[t] <= e_produced[t-1] + ramp_rate_up * (pre_installed_capacity);
e_produced[t] >= e_produced[t-1] - ramp_rate_down * (pre_installed_capacity);
#OBJECTIVES
min: vom * e_produced[t]; // M€
min: fuel_cost * e_produced[t]/conversion_efficiency; // M€

#NODE NG_IMPORTS
#PARAMETERS
import_costs = import "cost_import_ng.csv"; // M€/GWh
base_demand = 182; // TWh
max_base_demand = 5; // 
year = T/8760;
max_import = max_base_demand * base_demand * 10**3 * year;
#VARIABLES
external: imported[T]; // GWh/h
internal: total_imported[T];
#CONSTRAINTS
imported[t] >= 0;
total_imported[0] == imported[0];
total_imported[t] == (total_imported[t-1] + imported[t]);
total_imported[T-1]  <= max_import;
#OBJECTIVES
min: import_costs[t] * imported[t]; // M€

#NODE H2_IMPORTS
#PARAMETERS
import_capacity = import "import_h2_cap.csv"; // GWh/h
import_costs = 160 * 1/(10**3); // k€/MWh
mu_H2 = 2; // number of tankers?
energy_p_tanker = 165; // GWh
delivery_p_week = 3;
n_weeks = 52;
year = T/8760;
max_import = mu_H2 * energy_p_tanker * delivery_p_week * n_weeks * year; // GWh
#VARIABLES
internal: total_imported[T];
external: imported[T]; // GWh/h
#CONSTRAINTS
imported[t] >= 0;
imported[t] <= import_capacity[t];
total_imported[0] == imported[0];
total_imported[t] == (total_imported[t-1] + imported[t]);
total_imported[T-1] <= max_import; //  
#OBJECTIVES
min: import_costs * imported[t]; // M€

#NODE E_INTERCONNECTION
#PARAMETERS
import_costs = import "cost_import_el.csv"; // M€/GWh
demand_el = import "demand_el.csv"; // GWh/h - tertiary, industry, residential and railway electricity demand
demand_el_ht = import "demand_el_ht.csv"; // GWh/h - electricity heating demand
daily_demand_for_electric_vehicle = import "demand_el_tr.csv"; // GWh - electricity demand for EV charging
import_capacity = 6.5; // GW
max_import_share = 0.1; 
year = T/8760;
days = year * 365;
demand_tot = sum(demand_el[i] + demand_el_ht[i] for i in [0:T-1]) + sum(daily_demand_for_electric_vehicle[i] for i in [0:days-1]); 
max_import = max_import_share * demand_tot; 
n_days = 365;
#VARIABLES
internal: imported[T]; // GWh/h
internal: export[T]; // GWh/h
internal: total_imported[T]; // GWh/h
external: net_flow[T]; // GWh/h
#CONSTRAINTS
imported[t] >= 0;
export[t] >= 0;
imported[t] <= import_capacity;
export[t] <= import_capacity;
total_imported[0] == imported[0];
total_imported[t] == (total_imported[t-1] + imported[t]);
total_imported[T-1] <= max_import; //  
net_flow[t] == imported[t] - export[t];
#OBJECTIVES
min: import_costs[t] * net_flow[t]; // M€

#NODE CO2_EXPORTS
#PARAMETERS
transport_costs = 2 * 1/(10**3); // k€/t
transport_capacity = 3.5; // kt/h
#VARIABLES
external: export[T]; // kt/h 
#CONSTRAINTS
export[t] >= 0;
export[t] <= transport_capacity;
#OBJECTIVES
min: transport_costs * export[t]; // B€

#NODE ELECTROLYSIS_PLANTS
#PARAMETERS
conversion_efficiency = 0.62; // 
min_external_power = 0.05; // 
stoichiometric_coef_H2O_H2 = 1; // 
stoichiometric_coef_O2_H2 = 0.5; // 
molar_mass_H2O = 18; // g/mol
molar_mass_H2 = 2; // g/mol
molar_mass_O2 = 32; // g/mol
hhv_H2 = 39.4; // GWh/kt or MJ/kg 
ramp_rate_down = 1;
ramp_rate_up = 1;
pre_installed_capacity = 0; // GW(h)
max_capacity = 13.5; // GW 
capex = 600.0; // k€/MW(h)
fom = 30.0; // M€/GW(h)
vom = 0.0; // €/MWh
lifetime = 15;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
external: e_consumed[T]; // Gwh/h - electricity consumed by the electrolysis plants
internal: capacity; // GW(h)
internal: H2O_produced[T]; // kt/h
internal: O2_produced[T]; // kt/h
external: h2_produced[T]; // GWh/h
#CONSTRAINTS
e_consumed[t] >= 0;
capacity >= 0;
H2O_produced[t] >= 0;
O2_produced[t] >= 0;
h2_produced[t] >= 0;
e_consumed[t] <= capacity + pre_installed_capacity;
capacity <= max_capacity - pre_installed_capacity;
min_external_power * capacity <= e_consumed[t];
h2_produced[t] == conversion_efficiency * e_consumed[t];
H2O_produced[t] == stoichiometric_coef_H2O_H2 * (molar_mass_H2O * h2_produced[t])/(molar_mass_H2 * hhv_H2);
O2_produced[t] == stoichiometric_coef_O2_H2 * (molar_mass_O2 * h2_produced[t])/(molar_mass_H2 * hhv_H2);
h2_produced[t] <= h2_produced[t-1] + ramp_rate_up * (pre_installed_capacity + capacity);
h2_produced[t] >= h2_produced[t-1] - ramp_rate_down * (pre_installed_capacity + capacity);
#OBJECTIVES
min: (capex_year + fom * year) * capacity ; // M€
//min: vom * e_consumed[t]; // M€

#NODE FUEL_CELLS
#PARAMETERS
conversion_efficiency = 0.5; // 
min_external_power = 0.0; // 
pre_installed_capacity = 0.0; //
max_capacity = 13.5; // GW
ramp_rate_up = 1; // 
ramp_rate_down = 1; //
stoichiometric_coef_H2O_H2 = 1; // 
stoichiometric_coef_O2_H2 = 0.5; // 
molar_mass_H2O = 18; // g/mol
molar_mass_H2 = 2; // g/mol
molar_mass_O2 = 32; // g/mol
hhv_H2 = 39.4; // GWh/kt 
capex = 2000.0; // k€/MW(h)
fom = 100.0; // M€/GW(h)
vom = 0.0; // k€/MWh
lifetime = 30;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
external: h2_consumed[T]; // GWh/h
internal: capacity; // GWh/h
internal: O2_consumed[T]; // kt/h
internal: H2O_produced[T]; // kt/h
external: e_produced[T]; // GW/h
#CONSTRAINTS
h2_consumed[t] >= 0;
capacity >= 0;
e_produced[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
min_external_power * capacity <= e_produced[t];
e_produced[t] == conversion_efficiency * h2_consumed[t];
e_produced[t] <= capacity + pre_installed_capacity;
H2O_produced[t] == stoichiometric_coef_H2O_H2 * molar_mass_H2O/molar_mass_H2 * h2_consumed[t]/hhv_H2;
O2_consumed[t] == stoichiometric_coef_O2_H2 * molar_mass_O2/molar_mass_H2 * h2_consumed[t]/hhv_H2;
e_produced[t] <= e_produced[t-1] + ramp_rate_up * (pre_installed_capacity + capacity);
e_produced[t] >= e_produced[t-1] - ramp_rate_down * (pre_installed_capacity + capacity);
#OBJECTIVES
min: (capex_year + fom * year) * capacity; // M€
//min: vom * e_produced[t]; // M€

#NODE CHP // combined heat and power plant
#PARAMETERS
pre_installed_capacity = 1.8; // GW(h)
max_capacity = 1.8; // GW(h)
ramp_rate_up = 0.25; // 
ramp_rate_down = 0.3; // 
min_external_power = 0.2; // 
spec_CO2_emission = 0.202; // kt/GWh or t/MWh
conversion_efficiency = 0.49; // 
fom = 40.0; // M€/GW(h)
vom = 0.0 ; // k€/MWh
year = T/8760;
#VARIABLES
external: ng_consumed[T]; // GWh/h
//internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h
external: co2_produced[T]; // kt/h
#CONSTRAINTS
//capacity[t] >= 0;
ng_consumed[t] >= 0;
e_produced[t] >= 0;
co2_produced[t] >= 0;
//capacity == capacity[t];
//capacity[t] <= max_capacity - pre_installed_capacity;
min_external_power * (pre_installed_capacity) <= e_produced[t];
e_produced[t] == conversion_efficiency * ng_consumed[t];
e_produced[t] <= pre_installed_capacity;
e_produced[t] <= e_produced[t-1] + ramp_rate_up * (pre_installed_capacity);
e_produced[t] >= e_produced[t-1] - ramp_rate_down * (pre_installed_capacity);
co2_produced[t] == spec_CO2_emission * ng_consumed[t];
#OBJECTIVES
min: vom * e_produced[t]; // M€

#NODE OCGT // open-cycle gas turbine
#PARAMETERS
pre_installed_capacity = 0; // GW(h)
max_capacity = 13.5; // GW(h)
ramp_rate_up = 1.0; // 
ramp_rate_down = 1.0; // 
min_external_power = 0.0; // 
spec_CO2_emission = 0.202; // kt/GWh or t/MWh
conversion_efficiency = 0.41; // 
capex = 560.0; // k€/MW(h)
fom = 18.6; // M€/GW(h)
vom = 4.2 * 1/(10**3); // k€/MWh
lifetime = 25;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
external: ng_consumed[T]; // GWh/h
internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h
external: co2_produced[T]; // kt/h
#CONSTRAINTS
ng_consumed[t] >= 0;
capacity >= 0;
e_produced[t] >= 0;
co2_produced[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
//min_external_power * (capacity + pre_installed_capacity) <= e_produced[t];
e_produced[t] <= capacity + pre_installed_capacity;
e_produced[t] == conversion_efficiency * ng_consumed[t];
e_produced[t] - e_produced[t-1] <= ramp_rate_up * (capacity + pre_installed_capacity);
e_produced[t] - e_produced[t-1] >= - ramp_rate_down * (capacity + pre_installed_capacity);
co2_produced[t] == spec_CO2_emission * ng_consumed[t];
#OBJECTIVES
min: (capex_year + fom * year) * capacity; // M€
min: vom * e_produced[t]; // M€

#NODE CCGT // combined-cycle gas turbine
#PARAMETERS
pre_installed_capacity = 0.0; // GW(h)
max_capacity = 13.5; // GW(h)
ramp_rate_up = 1; // 
ramp_rate_down = 1; // 
min_external_power = 0.0; // 
spec_CO2_emission = 0.202; // kt/GWh or t/MWh
conversion_efficiency = 0.58; // %
capex = 830.0; // k€/MW(h)
fom = 27.8; // M€/GW(h)
vom = 4.2 * 1/(10**3); // k€/MWh
lifetime = 25.0;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
external: ng_consumed[T]; // GWh/h
internal: capacity; // GWh/h
external: e_produced[T]; // GWh/h
external: co2_produced[T]; // kt/h
#CONSTRAINTS
ng_consumed[t] >= 0;
capacity >= 0;
e_produced[t] >= 0;
co2_produced[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
min_external_power * (capacity + pre_installed_capacity) <= e_produced[t];
e_produced[t] <= capacity + pre_installed_capacity;
e_produced[t] == conversion_efficiency * ng_consumed[t];
e_produced[t] - e_produced[t-1] <= ramp_rate_up * (capacity + pre_installed_capacity);
e_produced[t] - e_produced[t-1] >= -ramp_rate_down * (capacity + pre_installed_capacity);
co2_produced[t] == spec_CO2_emission * ng_consumed[t];
#OBJECTIVES
min: (capex_year + fom * year) * capacity; // M€
min: vom * e_produced[t]; // M€

#NODE METHANATION_PLANTS
#PARAMETERS
pre_installed_capacity = 0.0;
max_capacity = 13.5; // GW(h)
ramp_rate_up = 1; // 
ramp_rate_down = 1; // 
conversion_efficiency = 0.78; // 
min_external_power = 0.0; // 
stoichiometric_coef_CO2_CH4 = 1.0; // 
molar_mass_CH4 = 16; // g/mol
molar_mass_CO2 = 44; // g/mol
hhv_CH4 = 15.4; // GWh/kt 
capex = 400.0; // k€/MW(h)
fom = 20.0; // M€/GW(h)
vom = 0.0; // k€/MWh
lifetime = 20;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
external: co2_consumed[T]; // kt/h
external: h2_consumed[T]; // GWh/h
internal: capacity; // GWh/h of CH4
external: ng_produced[T]; // GWh/h
#CONSTRAINTS
co2_consumed[t] >= 0;
capacity >= 0;
capacity <= max_capacity - pre_installed_capacity;
h2_consumed[t] >= 0;
min_external_power * (capacity + pre_installed_capacity) <= ng_produced[t];
ng_produced[t] <= capacity + pre_installed_capacity;
ng_produced[t] == conversion_efficiency * h2_consumed[t];
ng_produced[t] - ng_produced[t-1] <= ramp_rate_up * (capacity + pre_installed_capacity);
ng_produced[t] - ng_produced[t-1] >= -ramp_rate_down * (capacity + pre_installed_capacity);
co2_consumed[t] == stoichiometric_coef_CO2_CH4 * molar_mass_CO2/molar_mass_CH4 * ng_produced[t]/hhv_CH4;
#OBJECTIVES
min: (capex_year + fom * year) * capacity; // M€
min: vom * ng_produced[t]; // M€

#NODE SMR // steam methane reformers
#PARAMETERS
pre_installed_capacity = 0.0;
max_capacity = 13.5; // GW(h)
min_external_power = 0.0; 
conversion_efficiency = 0.8; // %
electricity_required_for_H2 = 0.023; // [-]
spec_CO2_emission = 0.202; // kt/GWh or t/MWh 
capex = 400.0; // k€/MW(h)
fom = 20.0; // M€/GW(h)
vom = 0.0; // k€/MWh
lifetime = 20;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
external: ng_consumed[T]; // GWh/h
external: e_consumed[T]; // GWh/h
internal: capacity; // GWh/h of H2
external: h2_produced[T]; // GWh/h
external: co2_produced[T]; // kt/h
#CONSTRAINTS
ng_consumed[t] >= 0;
e_consumed[t] >= 0; 
capacity >= 0;
co2_produced[t] >= 0;
h2_produced[t] >=0;
capacity <= max_capacity - pre_installed_capacity;
h2_produced[t] == conversion_efficiency * ng_consumed[t];
e_consumed[t] == electricity_required_for_H2 * h2_produced[t];
co2_produced[t] == spec_CO2_emission * ng_consumed[t];
h2_produced[t] <= capacity + pre_installed_capacity;
#OBJECTIVES
min: (capex_year + fom * year) * capacity; // M€
min: vom * h2_produced[t]; // M€

#NODE DAC // Direct air capture plants
#PARAMETERS
pre_installed_capacity = 0.0; // kt/h
max_capacity = 0.0; // kt/h
capex = 7500.0; // M€/kt/h
fom = 25.0; //  M€/kt/h
vom = 0.0; // €/kt
lifetime = 30;
year = T/8760;
capex_year = capex/lifetime * year;
electricity_required_for_CO2 = 0.366; // MWh/t or GWh/kt
NG_required_for_CO2 = 1.47; // MWh/t or GWh/kt
spec_CO2_emission = 0.202; // kt/GWh or t/MWh 
#VARIABLES
internal: capacity; // kt/h - carbon dioxide is the reference flow for sizing
external: e_consumed[T]; // GWh
external: ng_consumed[T]; // GWh
external: co2_captured[T]; // kt/h
external: co2_exiting[T]; // kt/h
#CONSTRAINTS
capacity >= 0;
e_consumed[t] >= 0;
ng_consumed[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
co2_captured[t] >= 0;
co2_exiting[t] >= 0;
co2_captured[t] <= capacity;
e_consumed[t] == electricity_required_for_CO2 * co2_captured[t];
ng_consumed[t] == NG_required_for_CO2 * co2_captured[t];
co2_exiting[t] == co2_captured[t] + spec_CO2_emission * ng_consumed[t];
#OBJECTIVES
min: (capex_year + fom * year) * capacity; // M€
//min: vom * co2_captured[t]; // M€

#NODE PCCC_WS // post combustion carbone capture waste power plant
#PARAMETERS
pre_installed_capacity = 0;
max_capacity = 0.0; // kt - maximum capacity of carbon capture 
capex = 2160.0; // M€/kt/h
CO2_emission_cost = 80.0 * 1/(10**3); // M€/kt
electricity_required_for_CO2 = 0.4125; // MWh/t or GWh/kt
lifetime = 20;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
internal: capacity;
external: e_consumed[T];
external: e_produced_net[T];
external: co2_released[T];
external: co2_captured[T];
#CONSTRAINTS
capacity >= 0;
e_produced_net[t] >= 0;
co2_captured[t] >= 0;
co2_released[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
co2_captured[t] <= capacity;
e_consumed[t] == electricity_required_for_CO2 * co2_captured[t];
#OBJECTIVES
min: capex_year * capacity; // M€
min: CO2_emission_cost * co2_released[t]; // M€


#NODE PCCC_BM // post combustion carbone capture of biomass
#PARAMETERS
pre_installed_capacity = 0;
max_capacity = 0.0; // kt - maximum capacity of carbon capture 
capex = 2160.0; // M€/kt/h
CO2_emission_cost = 80.0 * 1/(10**3); // M€/kt
electricity_required_for_CO2 = 0.4125; // MWh/t or GWh/kt
lifetime = 20;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
internal: capacity;
external: e_consumed[T];
external: e_produced_net[T];
external: co2_released[T];
external: co2_captured[T];
#CONSTRAINTS
capacity >= 0;
e_produced_net[t] >= 0;
co2_captured[t] >= 0;
co2_released[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
co2_captured[t] <= capacity;
e_consumed[t] == electricity_required_for_CO2 * co2_captured[t];
#OBJECTIVES
min: capex_year * capacity; // M€
min: CO2_emission_cost * co2_released[t]; // M€

#NODE PCCC_CHP // post combustion carbone capture combined heat and power plant
#PARAMETERS
pre_installed_capacity = 0;
max_capacity = 0.0; // kt - maximum capacity of carbon capture 
capex = 3150.0; // M€/kt/h
CO2_emission_cost = 80.0 * 1/(10**3); // M€/kt 
electricity_required_for_CO2 = 0.4125; // MWh/t or GWh/kt
lifetime = 20;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
internal: capacity;
external: e_consumed[T];
external: e_produced_net[T];
external: co2_released[T];
external: co2_captured[T];
#CONSTRAINTS
capacity >= 0;
e_produced_net[t] >= 0;
co2_captured[t] >= 0;
co2_released[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
co2_captured[t] <= capacity;
e_consumed[t] == electricity_required_for_CO2 * co2_captured[t];
#OBJECTIVES
min: capex_year * capacity; // M€
min: CO2_emission_cost * co2_released[t]; // M€

#NODE PCCC_CCGT // post combustion carbone capture waste power plant
#PARAMETERS
pre_installed_capacity = 0;
max_capacity = 0.0; // kt - maximum capacity of carbon capture 
capex = 3150.0; // M€/kt/h
CO2_emission_cost = 80.0 * 1/(10**3); // M€/kt 
electricity_required_for_CO2 = 0.4125; // MWh/t or GWh/kt
lifetime = 20;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
internal: capacity;
external: e_consumed[T];
external: e_produced_net[T];
external: co2_released[T];
external: co2_captured[T];
#CONSTRAINTS
capacity >= 0;
e_produced_net[t] >= 0;
co2_captured[t] >= 0;
co2_released[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
co2_captured[t] <= capacity;
e_consumed[t] == electricity_required_for_CO2 * co2_captured[t];
#OBJECTIVES
min: capex_year * capacity; // M€
min: CO2_emission_cost * co2_released[t]; // M€

#NODE PCCC_OCGT // post combustion carbone capture waste power plant
#PARAMETERS
pre_installed_capacity = 0;
max_capacity = 0.0; // kt - maximum capacity of carbon capture 
capex = 3150.0; // M€/kt/h
CO2_emission_cost = 80.0 * 1/(10**3); // M€/kt 
electricity_required_for_CO2 = 0.4125; // MWh/t or GWh/kt
lifetime = 20;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
internal: capacity;
external: e_consumed[T];
external: e_produced_net[T];
external: co2_released[T];
external: co2_captured[T];
#CONSTRAINTS
capacity >= 0;
e_produced_net[t] >= 0;
co2_captured[t] >= 0;
co2_released[t] >= 0;
capacity <= max_capacity - pre_installed_capacity;
co2_captured[t] <= capacity;
e_consumed[t] == electricity_required_for_CO2 * co2_captured[t];
#OBJECTIVES
min: capex_year * capacity; // M€
min: CO2_emission_cost * co2_released[t]; // M€

#NODE PCCC_SMR // post combustion carbone capture waste power plant
#PARAMETERS
pre_installed_capacity = 0;
max_capacity = 0.0; // kt - maximum capacity of carbon capture 
capex = 3150.0; // M€/kt/h
CO2_emission_cost = 80.0 * 1/(10**3); // M€/kt 
electricity_required_for_CO2 = 0.4125; // MWh/t or GWh/kt
lifetime = 20;
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
external: e_consumed[T];
internal: capacity;
external: co2_released[T];
external: co2_captured[T];
#CONSTRAINTS
e_consumed[t] >= 0;
capacity >= 0;
capacity <= max_capacity - pre_installed_capacity;
co2_captured[t] >= 0;
co2_released[t] >= 0;
co2_captured[t] <= capacity;
e_consumed[t] == electricity_required_for_CO2 * co2_captured[t];
#OBJECTIVES
min: capex_year * capacity; // M€
min: CO2_emission_cost * co2_released[t]; // M€

#NODE BATTERIES
#PARAMETERS
pre_installed_capacity_power = 0;
pre_installed_capacity_energy = 0;
max_capacity_power = 2500; // GW
max_capacity_energy = 5000; // GWh
capex_power = 108.0; // k€/MW(h)
capex_energy = 326.25; // k€/MW(h) 
fom_power = 5.4; // M€/GW(h)
fom_energy = 16.3125; // M€/GW(h)
vom = 0.0; // €/MWh
lifetime_power = 20;
lifetime_energy = 10;
year = T/8760;
capex_power_year = capex_power/lifetime_power * year;
capex_energy_year = capex_energy/lifetime_energy * year;
roundtrip_efficiency = 0.85; // 
charge_efficiency = roundtrip_efficiency**(1/2);
discharge_efficiency = charge_efficiency;
min_SOC = 0.0; // 
self_discharge = 0.999; // %
max_charged = 0.5; // fraction of the power capacity that limit the amount of electricity that can be charged in 1 hour
#VARIABLES
external: net_flow[T]; // GWh/h
internal: e_charged[T]; // GWh/h - electricity charged
internal: energy_capacity; // GWh/h
internal: power_capacity; // GWh/h
internal: state_of_charge[T]; // GWh/h
internal: e_discharged[T]; // GWh/h - electricity discharged
#CONSTRAINTS
energy_capacity >= 0;
energy_capacity <= max_capacity_energy - pre_installed_capacity_energy;
power_capacity >= 0;
power_capacity <= max_capacity_power - pre_installed_capacity_power;
e_charged[t] >= 0;
e_discharged[t] >= 0;
state_of_charge[t]>= 0;
state_of_charge[0] == state_of_charge[T-1];
min_SOC * (pre_installed_capacity_energy + energy_capacity) <= state_of_charge[t];
state_of_charge[t] <= (pre_installed_capacity_energy + energy_capacity);
state_of_charge[t+1] == self_discharge * state_of_charge[t] + charge_efficiency * e_charged[t] - 1/discharge_efficiency * e_discharged[t];
e_discharged[t] <= pre_installed_capacity_power + power_capacity;
charge_efficiency * e_charged[t] <= max_charged * (pre_installed_capacity_power + power_capacity);
net_flow[t] == - e_charged[t] + e_discharged[t];
#OBJECTIVES
min: (capex_energy_year + fom_energy * year) * energy_capacity; // M€
min: (capex_power_year + fom_power * year) * power_capacity; // M€

#NODE PUMPED_HYDRO
#PARAMETERS
pre_installed_capacity_power = 1.3; // GW
pre_installed_capacity_energy = 5.3; // GWh
max_capacity_power = 1.3; // GW
max_capacity_energy = 5.3; // GWh 
capex = 0.0; //
fom = 45.0; // M€/GW(h)
vom = 8.0 * 1/(10**3); // €/MWh
lifetime = 60;
year = T/8760;
capex_year = capex/lifetime * year;
roundtrip_efficiency = 0.81; // 
charge_efficiency = roundtrip_efficiency**(1/2);
discharge_efficiency = charge_efficiency;
min_SOC = 0.0; // 
self_discharge = 1; // 
max_charged = 1; // not given - fraction of the power capacity that limit the amount of electricity that can be charged in 1 hour
#VARIABLES
external: net_flow[T]; // GWh/h
internal: e_charged[T]; // GWh/h - electricity charged
//internal: energy_capacity; // GWh/h
//internal: power_capacity; // GWh/h
internal: state_of_charge[T]; // GWh/h
internal: e_discharged[T]; // GWh/h - electricity discharged
#CONSTRAINTS
e_charged[t] >= 0;
e_discharged[t] >= 0;
state_of_charge[t]>= 0;
state_of_charge[0] == state_of_charge[T-1];
min_SOC * pre_installed_capacity_energy <= state_of_charge[t];
state_of_charge[t] <= pre_installed_capacity_energy;
state_of_charge[t+1] == self_discharge * state_of_charge[t] + charge_efficiency * e_charged[t] - 1/discharge_efficiency * e_discharged[t];
e_charged[t] <= pre_installed_capacity_power;
e_discharged[t] <= pre_installed_capacity_power;
net_flow[t] == - e_charged[t] + e_discharged[t];
//energy_capacity[t] >= 0;
//energy_capacity[t] == energy_capacity;
//energy_capacity[t] <= max_capacity_energy - pre_installed_capacity_energy;
//power_capacity[t] >= 0;
//power_capacity[t] == power_capacity;
//power_capacity[t] <= max_capacity_power - pre_installed_capacity_power;
//1/discharge_efficiency * e_discharged[t] <= state_of_charge[t];
#OBJECTIVES
//min: (capex_year + fom * year) * energy_capacity; // M€
min: vom * e_charged[t]; // M€
 
#NODE NG_STORAGE
#PARAMETERS
pre_installed_capacity = 8000; // GW(h)
max_capacity = 8000; // GWh
max_flow_rate = 7; // GW(h)
capex = 0.1; // 
fom = 0.0025; // M€/GW(h)
vom = 0.0; // €/MWh
lifetime = 80.0;
capex_year = capex/lifetime;
year = 5;
roundtrip_efficiency = 0.975; // 
charge_efficiency = roundtrip_efficiency**(1/2);
discharge_efficiency = charge_efficiency;
min_SOC = 0.0; // 
self_discharge = 1; // 
max_charged = 0.5; // not given - fraction of the power capacity that limit the amount of electricity that can be charged in 1 hour
#VARIABLES
internal: ng_charged[T]; // GWh/h - electricity charged
//internal: capacity; // GWh/h
internal: state_of_charge[T]; // GWh/h
internal: ng_discharged[T]; // GWh/h - electricity discharged
external: net_flow[T]; // GWh/h
#CONSTRAINTS
//capacity[t] >= 0;
//capacity[t] == capacity;
ng_charged[t] >= 0;
ng_discharged[t] >= 0;
state_of_charge[t]>= 0;
state_of_charge[0] == state_of_charge[T-1];
ng_discharged[0] <= state_of_charge[0] - min_SOC * (pre_installed_capacity);
min_SOC * (pre_installed_capacity) <= state_of_charge[t];
state_of_charge[t] <= pre_installed_capacity;
//pre_installed_capacity + capacity[t] <= max_capacity;
state_of_charge[t+1] == self_discharge * state_of_charge[t] + charge_efficiency * ng_charged[t] - 1/discharge_efficiency * ng_discharged[t];
ng_discharged[t] <= max_flow_rate;
ng_charged[t] <= max_charged * max_flow_rate;
net_flow[t] == - ng_charged[t] + ng_discharged[t];
//#OBJECTIVES
//min: (capex_year + fom) * capacity ; // M€
//min: vom * ng_charged[t]; // M€

#NODE H2_STORAGE
#PARAMETERS
pre_installed_capacity = 0; // GW(h)
max_capacity = 10000; // GW(h)
capex = 11; // k€/MWh
fom = 0.55; // M€/GW(h)
vom = 0.0; // €/MWh
lifetime = 30;
year = T/8760;
capex_year = capex/lifetime * year;
roundtrip_efficiency = 1; // %
charge_efficiency = roundtrip_efficiency**(1/2);
discharge_efficiency = charge_efficiency;
min_SOC = 0.0; // %
duration_ratio = 0.1;
self_discharge = 1; // %
max_charged = 1; // fraction of the power capacity that limit the amount of electricity that can be charged in 1 hour
#VARIABLES
internal: capacity; // GWh/h
internal: max_flow; // GWh/h
internal: state_of_charge[T]; // GWh/h
internal: h2_discharged[T]; // GWh/h - hydrogen discharged
internal: h2_charged[T]; // GWh/h - hydrogen charged
external: net_flow[T]; // GWh/h
#CONSTRAINTS
capacity >= 0;
state_of_charge[t] >= 0;
h2_charged[t] >= 0;
h2_discharged[t] >= 0;
max_flow >= 0;
capacity <= max_capacity - pre_installed_capacity;
min_SOC * (pre_installed_capacity + capacity) <= state_of_charge[t];
state_of_charge[t] <= pre_installed_capacity + capacity;
state_of_charge[0] == state_of_charge[T-1];
h2_discharged[0] <= state_of_charge[0] - min_SOC * capacity;
state_of_charge[t+1] == self_discharge * state_of_charge[t] + charge_efficiency * h2_charged[t] - 1/discharge_efficiency * h2_discharged[t];
max_flow ==  duration_ratio * (pre_installed_capacity + capacity);
h2_discharged[t] <= max_flow;
h2_charged[t] <= max_charged * max_flow;
net_flow[t] == - h2_charged[t] + h2_discharged[t];
#OBJECTIVES
min: (capex_year + fom * year) * capacity; // M€
//min: vom * h2_charged[t]; // M€

#NODE CO2_STORAGE
#PARAMETERS
pre_installed_capacity = 0;
max_capacity = 100; // kt
duration_ratio = 0.2; //
max_charged = 1;
roundtrip_efficiency = 1;
charge_efficiency = roundtrip_efficiency**(1/2);
discharge_efficiency = charge_efficiency;
self_discharge = 1; // %
lifetime = 20;
capex = 0.1; // M€/kt
year = T/8760;
capex_year = capex/lifetime * year;
#VARIABLES
external: net_flow[T]; // kt/h
internal: max_flow_rate; // kt/h
internal: capacity; // kt
internal: co2_charged[T]; // kt/h - c02 charged
internal: state_of_charge[T]; // kt/h
internal: co2_discharged[T]; // kt/h - c02 discharged
#CONSTRAINTS
co2_charged[t] >= 0;
state_of_charge[t] >= 0;
co2_discharged[t] >= 0;
capacity >= 0;
capacity <= max_capacity;
state_of_charge[0] == state_of_charge[T-1];
state_of_charge[t] <= capacity;
state_of_charge[t+1] == self_discharge * state_of_charge[t] + charge_efficiency * co2_charged[t] - 1/discharge_efficiency * co2_discharged[t];
max_flow_rate == duration_ratio * capacity;
co2_discharged[t] <= max_flow_rate;
co2_charged[t] <= max_charged * max_flow_rate;
net_flow[t] == - co2_charged[t] + co2_discharged[t];
#OBJECTIVES
min: capex_year * capacity; // M€

#NODE POWER_BALANCE
#PARAMETERS
value_of_lost_load = 3000  * 1/(10**3); // k€/MWh
max_ens = 10000000; // GWh
daily_demand_for_electric_vehicle = import "demand_el_tr.csv"; // GWh - electricity demand for EV charging
#VARIABLES
external: ens[T]; // GWh/h - energy not served
external: e_charging_cars[T]; // GWh/h external: e_consumed_EP; // GWh/h - electricity consumed by electrolysis plants
#CONSTRAINTS
ens[t] >= 0;
ens[t] <= max_ens;
e_charging_cars[t] >= 0;
e_charging_cars[t] + e_charging_cars[t+1] + e_charging_cars[t+2] + e_charging_cars[t+3] + e_charging_cars[t+4] + e_charging_cars[t+5]
+ e_charging_cars[t+6] + e_charging_cars[t+7] + e_charging_cars[t+8] + e_charging_cars[t+9] + e_charging_cars[t+10] + e_charging_cars[t+11]
+ e_charging_cars[t+12] + e_charging_cars[t+13] + e_charging_cars[t+14] + e_charging_cars[t+15] + e_charging_cars[t+16] + e_charging_cars[t+17]
+ e_charging_cars[t+18] + e_charging_cars[t+19] + e_charging_cars[t+20] + e_charging_cars[t+21] + e_charging_cars[t+22] + e_charging_cars[t+23]
== daily_demand_for_electric_vehicle[t/24] where mod(t,24) == 0;
#OBJECTIVES
min: ens[t] * value_of_lost_load; // M€

#NODE NG_BALANCE
#PARAMETERS
value_of_lost_load = 500 * 1/(10**3); // k€/MWh
max_ens = 10000000; // GW
#VARIABLES
external: ens[T]; // GWh/h - energy not served
#CONSTRAINTS
ens[t] >= 0;
ens[t] <= max_ens;
#OBJECTIVES
min: ens[t] * value_of_lost_load; // M€

#NODE H2_BALANCE
#PARAMETERS
value_of_lost_load = 500  * 1/(10**3); // k€/MWh
max_ens = 10000000; // GW
#VARIABLES
external: ens[T]; // GWh/h - energy not served
#CONSTRAINTS
ens[t] >= 0;
ens[t] <= max_ens;
#OBJECTIVES
min: ens[t] * value_of_lost_load; // M€

#NODE CO2_BALANCE
#PARAMETERS
CO2_quota_emission = 15520; // kt
#VARIABLES
external: co2_emission[T]; // kt/h
internal: total_co2_emission[T]; // kt - sum of the total CO2 emission from the model
#CONSTRAINTS
total_co2_emission[0] == co2_emission[0];
total_co2_emission[t] == total_co2_emission[t-1] + co2_emission[t];
total_co2_emission[T-1] <= CO2_quota_emission;


#LINKS

// Waste power plant PCCC
PCCC_WS.co2_captured[t] <= global.max_co2_captured_rate * WASTE_POWER_PLANT.co2_produced[t];
WASTE_POWER_PLANT.co2_produced[t] == PCCC_WS.co2_captured[t] + PCCC_WS.co2_released[t];
PCCC_WS.e_produced_net[t] == WASTE_POWER_PLANT.e_produced[t] - PCCC_WS.e_consumed[t];

// Biomass power plant PCCC
PCCC_BM.co2_captured[t] <= global.max_co2_captured_rate * BIOMASS_POWER_PLANT.co2_produced[t];
BIOMASS_POWER_PLANT.co2_produced[t] == PCCC_BM.co2_captured[t] + PCCC_BM.co2_released[t];
PCCC_BM.e_produced_net[t] == BIOMASS_POWER_PLANT.e_produced[t] - PCCC_BM.e_consumed[t];

// Combined heat and power plant
PCCC_CHP.co2_captured[t] <= global.max_co2_captured_rate * CHP.co2_produced[t];
CHP.co2_produced[t] == PCCC_CHP.co2_captured[t] + PCCC_CHP.co2_released[t];
PCCC_CHP.e_produced_net[t] == CHP.e_produced[t] - PCCC_CHP.e_consumed[t];

// Open-cycle gas turbine
PCCC_OCGT.co2_captured[t] <= global.max_co2_captured_rate * OCGT.co2_produced[t];
OCGT.co2_produced[t] == PCCC_OCGT.co2_captured[t] + PCCC_OCGT.co2_released[t];
PCCC_OCGT.e_produced_net[t] == OCGT.e_produced[t] - PCCC_OCGT.e_consumed[t];

// Combined-cycle gas turbine
PCCC_CCGT.co2_captured[t] <= global.max_co2_captured_rate * CCGT.co2_produced[t];
CCGT.co2_produced[t] == PCCC_CCGT.co2_captured[t] + PCCC_CCGT.co2_released[t];
PCCC_CCGT.e_produced_net[t] == CCGT.e_produced[t] - PCCC_CCGT.e_consumed[t];

// Steam methane reformers
PCCC_SMR.co2_captured[t] <= global.max_co2_captured_rate * SMR.co2_produced[t];
SMR.co2_produced[t] == PCCC_SMR.co2_captured[t] + PCCC_SMR.co2_released[t];

// Power balance
PCCC_BM.e_produced_net[t] + PCCC_CCGT.e_produced_net[t] + PCCC_CHP.e_produced_net[t] + PCCC_OCGT.e_produced_net[t] + PCCC_WS.e_produced_net[t] 
+ SOLAR_PV_PLANTS.e_produced[t] + NUCLEAR_POWER_PLANT.e_produced[t] + WIND_OFFSHORE.e_produced[t] + WIND_ONSHORE.e_produced[t] + FUEL_CELLS.e_produced[t]
+ PUMPED_HYDRO.net_flow[t] + BATTERIES.net_flow[t] + E_INTERCONNECTION.net_flow[t] + POWER_BALANCE.ens[t] 
== global.demand_el[t] + global.demand_el_ht[t] + POWER_BALANCE.e_charging_cars[t] + DAC.e_consumed[t] + ELECTROLYSIS_PLANTS.e_consumed[t] + PCCC_SMR.e_consumed[t] + SMR.e_consumed[t];

// Natural gas balance
METHANATION_PLANTS.ng_produced[t] + NG_STORAGE.net_flow[t] + NG_IMPORTS.imported[t] + NG_BALANCE.ens[t] 
== global.demand_ng_heat[t] + global.demand_ng_industry[t] - global.demand_ng_to_h2[t] + global.demand_ng_transport[t] + DAC.ng_consumed[t]
+ SMR.ng_consumed[t] + CHP.ng_consumed[t] + CCGT.ng_consumed[t] + OCGT.ng_consumed[t];

global.demand_ng_heat[t] + global.demand_ng_industry[t] - global.demand_ng_to_h2[t] + global.demand_ng_transport[t] + DAC.ng_consumed[t]
+ SMR.ng_consumed[t] + CHP.ng_consumed[t] + CCGT.ng_consumed[t] + OCGT.ng_consumed[t]
<= global.ng_import_capacity;

// Hydrogen balance
SMR.h2_produced[t] + ELECTROLYSIS_PLANTS.h2_produced[t] + H2_STORAGE.net_flow[t] + H2_IMPORTS.imported[t] + H2_BALANCE.ens[t] == global.demand_h2_industry[t] + global.demand_h2_transport[t] + METHANATION_PLANTS.h2_consumed[t] + FUEL_CELLS.h2_consumed[t];

// Carbon dioxide balance
PCCC_BM.co2_captured[t] + PCCC_WS.co2_captured[t] + PCCC_CCGT.co2_captured[t] + PCCC_OCGT.co2_captured[t] + PCCC_SMR.co2_captured[t] + PCCC_CHP.co2_captured[t] 
+ DAC.co2_exiting[t] + CO2_STORAGE.net_flow[t] - CO2_EXPORTS.export[t]  ==  METHANATION_PLANTS.co2_consumed[t];

CO2_BALANCE.co2_emission[t] == global.spec_CO2_emission * (global.demand_ng_heat[t] + global.demand_ng_industry[t] - global.demand_ng_to_h2[t] + global.demand_ng_transport[t] - NG_BALANCE.ens[t])
- DAC.co2_captured[t] + PCCC_BM.co2_released[t] + PCCC_WS.co2_released[t] + PCCC_CCGT.co2_released[t] + PCCC_OCGT.co2_released[t] + PCCC_SMR.co2_released[t] + PCCC_CHP.co2_released[t];

