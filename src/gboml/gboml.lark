%import common.ESCAPED_STRING -> STRING
%import common.INT -> INT
%import common.FLOAT -> FLOAT
%import common.CNAME -> ID
%import common.WS
%import common.CPP_COMMENT -> SINGLE_LINE_COMMENT
%import common.C_COMMENT -> MULTI_LINE_COMMENT
%ignore WS
%ignore SINGLE_LINE_COMMENT
%ignore MULTI_LINE_COMMENT

//MACROS
_separated_list{sub, sep}: sub (sep sub)*
separated_list{sub, sep}: _separated_list{sub, sep}
_separated_maybe_empty_list{sub, sep}: _separated_list{sub, sep}?
separated_maybe_empty_list{sub, sep}: _separated_list{sub, sep}?
plist{content}: content*

// HEADER
start: [time_horizon] global_block program_block
program_block: _program*
?time_horizon: "#TIMEHORIZON" "T" "=" INT ";"
global_block: ("#GLOBAL" definition*)?
_program: node | hyperedge

// NODES
?node: node_definition | node_import
node_definition: "#NODE" var_or_param [loop] \
                  parameters_block \
                  program_block \
                  variables_block \
                  constraints_block \
                  objectives_block

parameters_block: ("#PARAMETERS" definition*)?
variables_block: "#VARIABLES" variable_definition*
constraints_block: ("#CONSTRAINTS" constraint*)?
objectives_block: ("#OBJECTIVES" objective*)?

node_import: "#NODE" ID "=" "import" var_or_param "from" STRING node_redefs
node_redefs: ("with" redefinition*) | ";"
?redefinition: variable_scope_change | definition
variable_scope_change: ID SCOPE ";"

// HYPEREDGES
?hyperedge: hyperedge_definition | hyperedge_import

hyperedge_definition: "#HYPEREDGE" var_or_param [loop] \
                      parameters_block \
                      constraints_block

hyperedge_import: "#HYPEREDGE" ID "=" "import" var_or_param "from" STRING hyperedge_redefs
hyperedge_redefs: "with" definition* | ";"

// VARIABLES
variable_definition: SCOPE [VTYPE] ":" var_or_param [_LARROW var_or_param] ";"
SCOPE: "internal" | "external"
VTYPE: "binary" | "continuous" | "integer"
_LARROW.1: "<-"

// CONSTRAINTS
?constraint: constraint_sos | constraint_std
constraint_std: [ID ":"] expression CTR_OPERATOR expression [loop] ";"
CTR_OPERATOR: "<=" | ">=" | "=="
constraint_sos: [ID ":"] SOS_TYPE array [loop] ";"
SOS_TYPE.1: "SOS1" | "SOS2"

// OBJECTIVES
objective: OBJ_TYPE [ID] ":" expression [loop] ";"
OBJ_TYPE: "min" | "max"

// LOOPS
?loop: multi_loop | implicit_loop
?multi_loop: base_loop+
base_loop: "for" ID "in" iterable ["where" bool_expression]
implicit_loop: "where" bool_expression

// BOOLEAN EXPRESSIONS
?bool_expression: bool_expression_or
?bool_expression_or: _separated_list{bool_expression_and, "or"}
?bool_expression_and: _separated_list{_maybe_not, "and"}
_maybe_not: bool_expression_not | _maybe_bool_parenthesis
bool_expression_not: "not" _maybe_bool_parenthesis
_maybe_bool_parenthesis: "(" bool_expression ")" | bool_expression_comparison
bool_expression_comparison: expression (COMPARISON_OPERATOR | CTR_OPERATOR) expression
COMPARISON_OPERATOR:  "<" | ">" | "!="

// DEFINITIONS
definition: ID "=" rvalue ";"

// ARRAYS
array_or_dict: "{" separated_maybe_empty_list{_array_or_dict_entry, ","} "}"
array: "{" separated_maybe_empty_list{generated_rvalue, ","} "}"
dict: "{" separated_maybe_empty_list{dict_entry, ","} "}"
_array_or_dict_entry: generated_rvalue | dict_entry
dict_entry: rvalue ":" rvalue [loop]

// RANGE
range: "[" expression ":" expression [":" expression] "]"

// EXPRESSIONS
?expression: substraction
?substraction: _separated_list{sum, "-"}
?sum: _separated_list{division, "+"}
?division: _separated_list{product, "/"}
?product: _separated_list{modulo, "*"}
?modulo: _separated_list{exponent, "%"}
?exponent: _separated_list{_maybe_unary_minus, "**"}
_maybe_unary_minus: value | unary_minus
unary_minus: "-" value
?value: function | var_or_param | INT | FLOAT | ("(" expression ")")

// FUNCTIONS
function: ID "(" separated_maybe_empty_list{generated_rvalue, ","} ")"

// VAR OR PARAM LINK
var_or_param: separated_list{var_or_param_leaf, "."}
var_or_param_leaf: ID plist{index}
?index: "[" rvalue "]"

//rvalue: anything that can be assigned to a parameter
?rvalue: import | array_or_dict | expression | range | STRING
import: "import" STRING
?generated_rvalue: rvalue loop?
?iterable: array | range | function | var_or_param