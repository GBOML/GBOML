%import common.ESCAPED_STRING -> STRING
%import common.INT -> INT
%import common.FLOAT -> FLOAT
%import common.CNAME -> ID
%import common.WS
%import common.CPP_COMMENT -> SINGLE_LINE_COMMENT
%import common.C_COMMENT -> MULTI_LINE_COMMENT
%ignore WS
%ignore SINGLE_LINE_COMMENT
%ignore MULTI_LINE_COMMENT

//MACROS
_separated_list{sub, sep}: sub (sep sub)*
separated_list{sub, sep}: _separated_list{sub, sep}
_separated_maybe_empty_list{sub, sep}: _separated_list{sub, sep}?
separated_maybe_empty_list{sub, sep}: _separated_list{sub, sep}?
olist{content}: content* //optionnal list
mlist{content}: content+ //mandatory list
_block_repeat_or_pass{name, content}: name (_PASS ";" | content+)
_block_shortcut{name, content}: name (_PASS? ";" | content)
_PASS.1: "pass"

// HEADER
start: [time_horizon] global_block program_block
program_block: _program*
?time_horizon: "#TIMEHORIZON" "T" "=" INT ";"
global_block: _block_repeat_or_pass{"#GLOBAL",definition}?
_program: node | hyperedge

// TAGS
tags: TAG*
TAG: /@[a-zA-Z\-_]+/

// Extends
extends: "extends" var_or_param ["from" STRING]

// NODES
?node: node_definition | node_import
node_definition: _block_shortcut{_node_header, _node_content}
_node_header: "#NODE" ID olist{index_id} [extends] [loop] tags
_node_content: parameters_block program_block variables_block constraints_block objectives_block

parameters_block: (_block_repeat_or_pass{_opt_param_header,definition})?
_opt_param_header: "#PARAMETERS"?
variables_block: _block_repeat_or_pass{"#VARIABLES",variable_definition}
constraints_block: (_block_repeat_or_pass{"#CONSTRAINTS",_constraint_block_c})?
_constraint_block_c: constraint | ctr_activate | ctr_deactivate
objectives_block: (_block_repeat_or_pass{"#OBJECTIVES",_objective_block_c})?
_objective_block_c: objective | obj_activate | obj_deactivate

node_import: "#NODE" ID "=" "import" var_or_param "from" STRING node_redefs
node_redefs: ("with" redefinition*) | ";"
?redefinition: variable_scope_change | definition
variable_scope_change: ID SCOPE ";"

// HYPEREDGES
?hyperedge: hyperedge_definition | hyperedge_import

hyperedge_definition: _block_shortcut{_hyperedge_header, _hyperedge_content}
_hyperedge_header: "#HYPEREDGE" ID olist{index_id} [extends] [loop] tags
_hyperedge_content: parameters_block constraints_block

hyperedge_import: "#HYPEREDGE" ID "=" "import" var_or_param "from" STRING hyperedge_redefs
hyperedge_redefs: "with" definition* | ";"

// VARIABLES
variable_definition: SCOPE [VTYPE] ":" separated_list{variable_name,","} [_LARROW separated_list{var_or_param, ","}] ["in" "[" [expression] ":" [expression] "]"] tags ";"
variable_name: ID olist{index}
SCOPE: "internal" | "external"
VTYPE: "binary" | "continuous" | "integer"
_LARROW.1: "<-"

// CONSTRAINTS
?constraint: constraint_sos | constraint_std
constraint_std: [ID ":"] expression CTR_OPERATOR expression [loop] tags ";"
CTR_OPERATOR: "<=" | ">=" | "=="
constraint_sos: [ID ":"] SOS_TYPE array [loop] tags ";"
SOS_TYPE.1: "SOS1" | "SOS2"

// OBJECTIVES
objective: OBJ_TYPE [ID] ":" expression [loop] tags ";"
OBJ_TYPE: "min" | "max"

// LOOPS
?loop: multi_loop | implicit_loop
?multi_loop: (base_loop | eq_loop)+
base_loop: "for" ID "in" iterable ["where" bool_expression]
eq_loop: "for" ID "=" var_or_param ["where" bool_expression]
implicit_loop: "where" bool_expression

// BOOLEAN EXPRESSIONS
?bool_expression: bool_expression_or
?bool_expression_or: _separated_list{bool_expression_and, "or"}
?bool_expression_and: _separated_list{_maybe_not, "and"}
_maybe_not: bool_expression_not | _maybe_bool_parenthesis
bool_expression_not: "not" _maybe_bool_parenthesis
_maybe_bool_parenthesis: "(" bool_expression ")" | bool_expression_comparison
bool_expression_comparison: expression (COMPARISON_OPERATOR | CTR_OPERATOR) expression
COMPARISON_OPERATOR:  "<" | ">" | "!="

// DEFINITIONS
?definition: definition_std_param | definition_indexing_param
definition_indexing_param: ID "in" iterable ";"
definition_std_param: ID ["(" separated_list{ID, ","} ")"] DEF_TYPE rvalue tags ";"
DEF_TYPE: "=" | "<-"

// ARRAYS
array_or_dict: "{" separated_maybe_empty_list{_array_or_dict_entry, ","} "}"
array: "{" separated_maybe_empty_list{generated_rvalue, ","} "}"
dict: "{" separated_maybe_empty_list{dict_entry, ","} "}"
_array_or_dict_entry: generated_rvalue | dict_entry
dict_entry: rvalue ":" rvalue [loop]

// RANGE
range: "[" expression ":" expression [":" expression] "]"

// EXPRESSIONS
?expression: subtraction
?subtraction: _separated_list{sum, "-"}
?sum: _separated_list{division, "+"}
?division: _separated_list{product, "/"}
?product: _separated_list{modulo, "*"}
?modulo: _separated_list{exponent, "%"}
?exponent: _separated_list{_maybe_unary_minus, "**"}
_maybe_unary_minus: value | unary_minus
unary_minus: "-" value
?value: function | var_or_param | INT | FLOAT | ("(" expression ")")

// ACTIVATE/DEACTIVATE
_activate.1: "activate" separated_list{_activation_id, ","} ["if" bool_expression] ";"
_deactivate.1: "deactivate" separated_list{_activation_id, ","} ["if" bool_expression] ";"
_activation_id: ID | TAG
ctr_activate: _activate
ctr_deactivate: _deactivate
obj_activate: _activate
obj_deactivate: _deactivate


// FUNCTIONS
function: ID "(" separated_maybe_empty_list{generated_rvalue, ","} ")"

// VAR OR PARAM LINK
var_or_param: separated_list{var_or_param_leaf, "."}
var_or_param_leaf: (ID | TAG) olist{index}
?index: "[" rvalue "]"
?index_id: "[" ID "]"

//rvalue: anything that can be assigned to a parameter
?rvalue: import | array_or_dict | expression | range | STRING
import: "import" STRING
?generated_rvalue: rvalue loop?
?iterable: array | range | function | var_or_param